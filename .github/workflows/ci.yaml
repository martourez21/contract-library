name: Maven CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Dummy Test Step
        run: echo "Tests ran successfully."

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: sudo apt-get update && sudo apt-get install -y maven unzip
      - name: Build and package
        run: mvn clean compile package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: regular-jar-${{ github.sha }}
          path: target/*.jar

  obfuscate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: sudo apt-get update && sudo apt-get install -y maven unzip
      - uses: actions/download-artifact@v4
        with:
          name: regular-jar-${{ github.sha }}
          path: target/
      - name: Prepare ProGuard and run obfuscation
        run: |
          curl -L -o proguard.zip "https://github.com/Guardsquare/proguard/releases/download/v7.4.2/proguard-7.4.2.zip"
          unzip proguard.zip
          INPUT_JAR=$(realpath target/contract-library-2.0-SNAPSHOT.jar)
          OUTPUT_JAR=$(realpath target/contract-library-2.0-SNAPSHOT.jar-obfuscated.jar)
          JAVA_HOME_PATH=$(realpath $JAVA_HOME)
          mkdir -p target/proguard-config
          cat <<EOF > target/proguard-config/proguard.pro
          -injars $INPUT_JAR
          -outjars $OUTPUT_JAR
          -libraryjars $JAVA_HOME_PATH/jmods/java.base.jmod(!**.jar;!module-info.class)
          -allowaccessmodification
          -dontoptimize
          -dontpreverify
          -dontshrink
          -keep public class com.contractlibs.** { *; }
          -keepattributes Signature,InnerClasses,EnclosingMethod
          -keepclassmembers class * implements java.io.Serializable { *; }
          -dontwarn
          EOF
          java -jar proguard-7.4.2/lib/proguard.jar @target/proguard-config/proguard.pro
      - uses: actions/upload-artifact@v4
        with:
          name: obfuscated-jar-${{ github.sha }}
          path: target/*-obfuscated.jar

  deploy-maven-central:
    runs-on: ubuntu-latest
    needs: obfuscate
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: sudo apt-get update && sudo apt-get install -y maven gnupg
      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --import --batch --yes
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      - uses: actions/download-artifact@v4
        with:
          name: obfuscated-jar-${{ github.sha }}
          path: target/
      - name: Replace main JAR with obfuscated version
        run: mv target/contract-library-2.0-SNAPSHOT.jar-obfuscated.jar target/contract-library-2.0-SNAPSHOT.jar
      - name: Configure Maven settings for deployment
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${{ secrets.CENTRAL_PORTAL_USERNAME }}</username>
                <password>${{ secrets.CENTRAL_PORTAL_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF
      - name: Deploy to Maven Central
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: mvn clean deploy -DskipTests -Dgpg.passphrase="${GPG_PASSPHRASE}" -Prelease
